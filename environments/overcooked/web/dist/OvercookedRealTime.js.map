{
  "version": 3,
  "sources": ["../OvercookedRealTime.jsx"],
  "sourcesContent": ["// Copyright 2023 AI Redefined Inc. <dev+cogment@ai-r.com>\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { useCallback, useState } from \"react\";\nimport {\n  Button,\n  DPAD_BUTTONS,\n  DPad,\n  FpsCounter,\n  KeyboardControlList,\n  OBSERVER_ACTOR_CLASS,\n  PlayObserver,\n  serializePlayerAction,\n  SimplePlay,\n  Space,\n  useDocumentKeypressListener,\n  useDPadPressedButtons,\n  usePressedKeys,\n  useRealTimeUpdate,\n} from \"@cogment/cogment-verse\";\n\nconst ACTION_SPACE = new Space({\n  discrete: {\n    n: 6,\n  },\n});\n\nexport const OvercookedRealTimeControls = ({ sendAction, fps = 10, actorClass, ...props }) => {\n  const [paused, setPaused] = useState(false);\n  const togglePause = useCallback(() => setPaused((paused) => !paused), [setPaused]);\n  useDocumentKeypressListener(\"p\", togglePause);\n\n  const pressedKeys = usePressedKeys();\n  const { pressedButtons, isButtonPressed, setPressedButtons } = useDPadPressedButtons();\n  const [activeButtons, setActiveButtons] = useState([]);\n\n  const computeAndSendAction = useCallback(\n    (dt) => {\n      if (pressedKeys.has(\"ArrowLeft\") || isButtonPressed(DPAD_BUTTONS.LEFT)) {\n        setActiveButtons([DPAD_BUTTONS.LEFT]);\n        sendAction(serializePlayerAction(ACTION_SPACE, 3));\n        return;\n      } else if (pressedKeys.has(\"ArrowRight\") || isButtonPressed(DPAD_BUTTONS.RIGHT)) {\n        setActiveButtons([DPAD_BUTTONS.RIGHT]);\n        sendAction(serializePlayerAction(ACTION_SPACE, 2));\n        return;\n      } else if (pressedKeys.has(\"ArrowUp\") || isButtonPressed(DPAD_BUTTONS.UP)) {\n        setActiveButtons([DPAD_BUTTONS.UP]);\n        sendAction(serializePlayerAction(ACTION_SPACE, 0));\n        return;\n      } else if (pressedKeys.has(\"ArrowDown\") || isButtonPressed(DPAD_BUTTONS.DOWN)) {\n        setActiveButtons([DPAD_BUTTONS.DOWN]);\n        sendAction(serializePlayerAction(ACTION_SPACE, 1));\n        return;\n      } else if (pressedKeys.has(\"Enter\")) {\n        sendAction(serializePlayerAction(ACTION_SPACE, 5));\n        return;\n      } else if (pressedKeys.has(\"Shift\")) {\n        sendAction(serializePlayerAction(ACTION_SPACE, 4));\n        return;\n      }\n    },\n    [isButtonPressed, pressedKeys, sendAction]\n  );\n\n  const { currentFps } = useRealTimeUpdate(computeAndSendAction, fps, paused);\n\n  return (\n    <div {...props}>\n      <div className=\"flex flex-row p-5 justify-center\">\n        <DPad\n          pressedButtons={pressedButtons}\n          onPressedButtonsChange={setPressedButtons}\n          activeButtons={activeButtons}\n        />\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        <Button className=\"flex-1\" onClick={togglePause}>\n          {paused ? \"Resume\" : \"Pause\"}\n        </Button>\n        <FpsCounter className=\"flex-none w-fit\" value={currentFps} />\n      </div>\n      <KeyboardControlList\n        items={[\n          [\"Left/Right/Up/Down Arrows\", \"Move end-effector left/right/up/down\"],\n          [\"Enter\", \"Interact\"],\n          [\"Space\", \"Skip time step\"],\n          [\"p\", \"Pause/Unpause\"],\n        ]}\n      />\n    </div>\n  );\n};\n\nconst PlayOvercookedRealTime = ({ actorParams, ...props }) => {\n  const actorClassName = actorParams?.className;\n\n  if (actorClassName === OBSERVER_ACTOR_CLASS) {\n    return <PlayObserver actorParams={actorParams} {...props} />;\n  }\n  return <SimplePlay actorParams={actorParams} {...props} controls={OvercookedRealTimeControls} />;\n};\n\nexport default PlayOvercookedRealTime;\n"],
  "mappings": "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",
  "names": ["useCallback", "useState", "Button", "DPAD_BUTTONS", "DPad", "FpsCounter", "KeyboardControlList", "OBSERVER_ACTOR_CLASS", "PlayObserver", "serializePlayerAction", "SimplePlay", "Space", "useDocumentKeypressListener", "useDPadPressedButtons", "usePressedKeys", "useRealTimeUpdate", "jsx", "jsxs", "ACTION_SPACE", "OvercookedRealTimeControls", "sendAction", "fps", "actorClass", "props", "paused", "setPaused", "togglePause", "pressedKeys", "pressedButtons", "isButtonPressed", "setPressedButtons", "activeButtons", "setActiveButtons", "computeAndSendAction", "dt", "currentFps", "PlayOvercookedRealTime", "actorParams", "OvercookedRealTime_default"]
}
