{
  "version": 3,
  "sources": ["../AtariPitfall.jsx"],
  "sourcesContent": ["// Copyright 2023 AI Redefined Inc. <dev+cogment@ai-r.com>\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { useCallback, useState } from \"react\";\nimport {\n  Button,\n  createLookup,\n  FpsCounter,\n  KeyboardControlList,\n  OBSERVER_ACTOR_CLASS,\n  PlayObserver,\n  serializePlayerAction,\n  SimplePlay,\n  Space,\n  TEACHER_ACTOR_CLASS,\n  TEACHER_NOOP_ACTION,\n  useDocumentKeypressListener,\n  usePressedKeys,\n  useRealTimeUpdate,\n} from \"@cogment/cogment-verse\";\n\nconst ACTION_SPACE = new Space({\n  discrete: {\n    n: 18,\n  },\n});\n\n// cf. https://www.gymlibrary.ml/environments/atari/#action-space\nconst ATARI_LOOKUP = createLookup();\nATARI_LOOKUP.setAction([], serializePlayerAction(ACTION_SPACE, 0));\nATARI_LOOKUP.setAction([\"FIRE\"], serializePlayerAction(ACTION_SPACE, 1));\nATARI_LOOKUP.setAction([\"UP\"], serializePlayerAction(ACTION_SPACE, 2));\nATARI_LOOKUP.setAction([\"RIGHT\"], serializePlayerAction(ACTION_SPACE, 3));\nATARI_LOOKUP.setAction([\"LEFT\"], serializePlayerAction(ACTION_SPACE, 4));\nATARI_LOOKUP.setAction([\"DOWN\"], serializePlayerAction(ACTION_SPACE, 5));\nATARI_LOOKUP.setAction([\"UP\", \"RIGHT\"], serializePlayerAction(ACTION_SPACE, 6));\nATARI_LOOKUP.setAction([\"UP\", \"LEFT\"], serializePlayerAction(ACTION_SPACE, 7));\nATARI_LOOKUP.setAction([\"DOWN\", \"RIGHT\"], serializePlayerAction(ACTION_SPACE, 8));\nATARI_LOOKUP.setAction([\"DOWN\", \"LEFT\"], serializePlayerAction(ACTION_SPACE, 9));\nATARI_LOOKUP.setAction([\"UP\", \"FIRE\"], serializePlayerAction(ACTION_SPACE, 10));\nATARI_LOOKUP.setAction([\"RIGHT\", \"FIRE\"], serializePlayerAction(ACTION_SPACE, 11));\nATARI_LOOKUP.setAction([\"LEFT\", \"FIRE\"], serializePlayerAction(ACTION_SPACE, 12));\nATARI_LOOKUP.setAction([\"DOWN\", \"FIRE\"], serializePlayerAction(ACTION_SPACE, 13));\nATARI_LOOKUP.setAction([\"UP\", \"RIGHT\", \"FIRE\"], serializePlayerAction(ACTION_SPACE, 14));\nATARI_LOOKUP.setAction([\"UP\", \"LEFT\", \"FIRE\"], serializePlayerAction(ACTION_SPACE, 15));\nATARI_LOOKUP.setAction([\"DOWN\", \"RIGHT\", \"FIRE\"], serializePlayerAction(ACTION_SPACE, 16));\nATARI_LOOKUP.setAction([\"DOWN\", \"LEFT\", \"FIRE\"], serializePlayerAction(ACTION_SPACE, 17));\n\nconst AtariPitfallControls = ({ sendAction, fps = 30, actorParams, ...props }) => {\n  const actorClassName = actorParams?.className;\n\n  const [paused, setPaused] = useState(false);\n  const togglePause = useCallback(() => setPaused((paused) => !paused), [setPaused]);\n  useDocumentKeypressListener(\"p\", togglePause);\n\n  const pressedKeys = usePressedKeys();\n\n  const computeAndSendAction = useCallback(\n    (dt) => {\n      if (pressedKeys.size === 0 && actorClassName === TEACHER_ACTOR_CLASS) {\n        sendAction(TEACHER_NOOP_ACTION);\n        return;\n      }\n\n      const controls = [];\n\n      if (pressedKeys.has(\"ArrowLeft\")) {\n        controls.push(\"LEFT\");\n      } else if (pressedKeys.has(\"ArrowRight\")) {\n        controls.push(\"RIGHT\");\n      }\n      if (pressedKeys.has(\"ArrowDown\")) {\n        controls.push(\"DOWN\");\n      } else if (pressedKeys.has(\"ArrowUp\")) {\n        controls.push(\"UP\");\n      }\n      if (pressedKeys.has(\" \")) {\n        controls.push(\"FIRE\");\n      }\n      const action = ATARI_LOOKUP.getAction(controls);\n      sendAction(action);\n    },\n    [pressedKeys, sendAction, actorClassName]\n  );\n\n  const { currentFps } = useRealTimeUpdate(computeAndSendAction, fps, paused);\n\n  return (\n    <div {...props}>\n      <div className=\"flex flex-row gap-1\">\n        <Button className=\"flex-1\" onClick={togglePause}>\n          {paused ? \"Resume\" : \"Pause\"}\n        </Button>\n        <FpsCounter className=\"flex-none w-fit\" value={currentFps} />\n      </div>\n      <KeyboardControlList\n        items={[\n          [\"Left/Right/Down/Up Arrows\", \"Move the character\"],\n          [\"Space\", \"Jump\"],\n          [\"p\", \"Pause/Unpause\"],\n        ]}\n      />\n    </div>\n  );\n};\n\nconst PlayAtariPitfall = ({ actorParams, ...props }) => {\n  const actorClassName = actorParams?.className;\n\n  if (actorClassName === OBSERVER_ACTOR_CLASS) {\n    return <PlayObserver actorParams={actorParams} {...props} />;\n  }\n  return <SimplePlay actorParams={actorParams} {...props} controls={AtariPitfallControls} />;\n};\n\nexport default PlayAtariPitfall;\n"],
  "mappings": "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",
  "names": ["useCallback", "useState", "Button", "createLookup", "FpsCounter", "KeyboardControlList", "OBSERVER_ACTOR_CLASS", "PlayObserver", "serializePlayerAction", "SimplePlay", "Space", "TEACHER_ACTOR_CLASS", "TEACHER_NOOP_ACTION", "useDocumentKeypressListener", "usePressedKeys", "useRealTimeUpdate", "jsx", "jsxs", "ACTION_SPACE", "ATARI_LOOKUP", "AtariPitfallControls", "sendAction", "fps", "actorParams", "props", "actorClassName", "paused", "setPaused", "togglePause", "pressedKeys", "computeAndSendAction", "dt", "controls", "action", "currentFps", "PlayAtariPitfall", "AtariPitfall_default"]
}
