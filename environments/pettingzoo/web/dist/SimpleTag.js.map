{
  "version": 3,
  "sources": ["../SimpleTag.jsx"],
  "sourcesContent": ["import {\n  Button,\n  DPAD_BUTTONS,\n  DPad,\n  FpsCounter,\n  KeyboardControlList,\n  OBSERVER_ACTOR_CLASS,\n  PlayObserver,\n  SimplePlay,\n  Space,\n  serializePlayerAction,\n  useDPadPressedButtons,\n  useDocumentKeypressListener,\n  usePressedKeys,\n  useRealTimeUpdate\n} from \"@cogment/cogment-verse\";\nimport { useCallback, useState } from \"react\";\n\nconst ACTION_SPACE = new Space({\n  discrete: {\n    n: 5,\n  },\n});\n\nexport const SimpleTagControls = ({ sendAction, fps = 40, actorClass, observation, ...props }) => {\n\n  console.log(\"actorClass: \" + actorClass)\n\n  const [paused, setPaused] = useState(false);\n  const togglePause = useCallback(() => setPaused((paused) => !paused), [setPaused]);\n  useDocumentKeypressListener(\"p\", togglePause);\n\n  const pressedKeys = usePressedKeys();\n  const { pressedButtons, isButtonPressed, setPressedButtons } = useDPadPressedButtons();\n  const [activeButtons, setActiveButtons] = useState([]);\n\n  const computeAndSendAction = useCallback(\n    (dt) => {\n      if (pressedKeys.has(\"ArrowLeft\") || isButtonPressed(DPAD_BUTTONS.LEFT)) {\n        setActiveButtons([DPAD_BUTTONS.LEFT]);\n        sendAction(serializePlayerAction(ACTION_SPACE, 1));\n        return;\n      } else if (pressedKeys.has(\"ArrowRight\") || isButtonPressed(DPAD_BUTTONS.RIGHT)) {\n        setActiveButtons([DPAD_BUTTONS.RIGHT]);\n        sendAction(serializePlayerAction(ACTION_SPACE, 2));\n        return;\n      } else if (pressedKeys.has(\"ArrowDown\") || isButtonPressed(DPAD_BUTTONS.DOWN)) {\n        setActiveButtons([DPAD_BUTTONS.DOWN]);\n        sendAction(serializePlayerAction(ACTION_SPACE, 3));\n        return;\n      } else if (pressedKeys.has(\"ArrowUp\") || isButtonPressed(DPAD_BUTTONS.UP)) {\n        setActiveButtons([DPAD_BUTTONS.UP]);\n        sendAction(serializePlayerAction(ACTION_SPACE, 4));\n        return;\n      }\n      setActiveButtons([]);\n      sendAction(serializePlayerAction(ACTION_SPACE, 0));\n    },\n    [isButtonPressed, pressedKeys, sendAction, setActiveButtons]\n  );\n\n  const { currentFps } = useRealTimeUpdate(computeAndSendAction, fps, paused);\n\n  return (\n    <div {...props}>\n      <div className=\"flex flex-row p-5 justify-center\">\n        <DPad\n          pressedButtons={pressedButtons}\n          onPressedButtonsChange={setPressedButtons}\n          activeButtons={activeButtons}\n          disabled={paused}\n        />\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        <Button className=\"flex-1\" onClick={togglePause}>\n          {paused ? \"Resume\" : \"Pause\"}\n        </Button>\n        <FpsCounter className=\"flex-none w-fit\" value={currentFps} />\n      </div>\n      <KeyboardControlList\n        items={[\n          [\"Left/Right/Up/Down Arrows\", \"Move left/right/up/down\"],\n          [\"p\", \"Pause/Unpause\"],\n        ]}\n      />\n    </div>\n  );\n};\n\n\nconst PlaySimpleTag = ({ actorParams, ...props }) => {\n  const actorClassName = actorParams?.className;\n  console.log(\"PlaySimpleTag | actorClassName: \" + actorClassName)\n\n\n  if (actorClassName === OBSERVER_ACTOR_CLASS) {\n    return <PlayObserver actorParams={actorParams} {...props} />;\n  }\n  return <SimplePlay actorParams={actorParams} {...props} controls={SimpleTagControls} />;\n};\n\nexport default PlaySimpleTag;\n"],
  "mappings": "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",
  "names": ["Button", "DPAD_BUTTONS", "DPad", "FpsCounter", "KeyboardControlList", "OBSERVER_ACTOR_CLASS", "PlayObserver", "SimplePlay", "Space", "serializePlayerAction", "useDPadPressedButtons", "useDocumentKeypressListener", "usePressedKeys", "useRealTimeUpdate", "useCallback", "useState", "jsx", "jsxs", "ACTION_SPACE", "SimpleTagControls", "sendAction", "fps", "actorClass", "observation", "props", "paused", "setPaused", "togglePause", "pressedKeys", "pressedButtons", "isButtonPressed", "setPressedButtons", "activeButtons", "setActiveButtons", "computeAndSendAction", "dt", "currentFps", "PlaySimpleTag", "actorParams", "actorClassName", "SimpleTag_default"]
}
