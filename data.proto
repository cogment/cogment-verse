// Copyright 2021 AI Redefined Inc. <dev+cogment@ai-r.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cogment_verse;

message NDArray {
  string dtype = 1;
  repeated uint32 shape = 2;
  bytes data = 3;
}


message EnvironmentConfig {
  string run_id = 1;
  int32 player_count = 2;
  bool render = 5;
  bool flatten = 6;
  int32 render_width = 7;
  uint32 framestack = 8;
  uint32 seed = 9;
}

message EnvironmentParams {
  string implementation = 1;
  EnvironmentConfig config = 2;
}

message ActorConfig {
  string run_id = 1;
  string model_id = 2;
  int32 model_version = 3;
  int32 num_input = 4;
  int32 num_action = 5;
  string environment_implementation = 6; // TODO Remove by retrieving info from the environment instead
  string env_type = 7;
  string env_name = 8;
}

message ActorParams {
  string name = 1;
  string actor_class = 2;
  string implementation = 3;
  ActorConfig config = 4;
}

message TrialConfig {
  string run_id = 1;
  EnvironmentParams environment = 3;
  repeated ActorParams actors = 4;
  int32 distinguished_actor = 6;
}

message Observation {
  NDArray vectorized = 1;
  bytes pixel_data = 2;
  repeated int32 legal_moves_as_int = 3;
  int32 current_player = 4; // active player for multi-agent turn-based environments
  int32 player_override = 5;  // player that _actually_ acted (in case of override/intervention)
}

message ContinuousAction {
  repeated float data = 1;
}

message AgentAction {
  oneof action {
      ContinuousAction continuous_action = 1;
      int32 discrete_action = 2;
  };
  NDArray policy = 3; // optional: policy from which action was drawn
  float value = 4; // optional: value of the state from which the action was taken
}

message ModelArgs {
  float v_min = 1;
  float v_max = 2;
  uint32 start_timesteps = 4;
  repeated int32 high_action = 5;
  repeated int32 low_action = 6;
  float expl_noise = 7;
  bool target_net_soft_update = 8;
  uint32 screensize = 9;
}

message ReplayBufferConfig {
    string action_dtype = 1;
    string observation_dtype = 2;
}

message RunConfig {
  string name = 1;
  uint32 num_input = 2;
  uint32 num_action = 3;
  string agent_implementation = 4;
  string environment_implementation = 5;
  uint32 player_count = 8;
  float epsilon_min = 9;
  float epsilon_max = 29;
  uint32 epsilon_steps = 10;
  uint32 target_net_update_schedule = 11;
  float learning_rate = 12;
  uint32 lr_warmup_steps = 13;
  uint32 demonstration_count = 14;
  uint32 total_trial_count = 15;
  uint32 model_publication_interval = 16;
  uint32 model_archive_interval_multiplier = 17; // Archive every fourth published model
  uint32 render_width = 18;
  uint32 batch_size = 19;
  uint32 min_replay_buffer_size = 20;
  uint32 max_parallel_trials = 21;
  ModelArgs model_kwargs = 22;
  uint32 max_replay_buffer_size = 23;
  bool flatten = 24;
  bool aggregate_by_actor = 26;
  uint32 framestack = 27;
  ReplayBufferConfig replay_buffer_config = 28;
  float discount_factor = 30;
}

message MLPNetworkConfig {
  uint32 hidden_size = 1;
}

message SimpleA2CTrainingConfig {
  uint32 epoch_count = 1;
  uint32 epoch_trial_count = 2;
  uint32 max_parallel_trials = 3;
  float discount_factor = 4;
  float entropy_coef = 5;
  float value_loss_coef = 6;
  float action_loss_coef = 7;
  float learning_rate = 8;
}

message SimpleA2CTrainingRunConfig {
  EnvironmentParams environment = 1;
  ActorConfig actor = 2;
  SimpleA2CTrainingConfig training = 3;
  MLPNetworkConfig actor_network = 4;
  MLPNetworkConfig critic_network = 5;
}

message MuZeroTrainingConfig {
  uint32 model_publication_interval = 1;
  uint32 trial_count = 2;
  uint32 max_parallel_trials = 3;
  float discount_rate = 4;
  float learning_rate = 5;
  float weight_decay = 6;
  uint32 bootstrap_steps = 7;
  uint32 representation_dim = 8;
  uint32 hidden_dim = 9;
  uint32 hidden_layers = 10;
  uint32 projector_dim = 11;
  uint32 projector_hidden_dim = 12;
  uint32 projector_hidden_layers = 13;
  uint32 mcts_depth = 14;
  uint32 mcts_samples = 15;
  float mcts_temperature = 28;
  float ucb_c1 = 16;
  float ucb_c2 = 17;
  uint32 batch_size = 18;
  float exploration_alpha = 19;
  float exploration_epsilon = 20;
  uint32 rollout_length = 21;
  float rmin = 22;
  float rmax = 23;
  float vmin = 24;
  float vmax = 25;
  uint32 rbins = 26;
  uint32 vbins = 27;
  uint32 max_replay_buffer_size = 29;
  uint32 min_replay_buffer_size = 30;
  uint32 log_frequency = 31;
}

message MuZeroTrainingRunConfig {
  EnvConfig environment = 1;
  ActorConfig actor = 2;
  MuZeroTrainingConfig training = 3;
}
